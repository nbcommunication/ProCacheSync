<?php namespace ProcessWire;

/**
 * ProCache Sync
 *
 * #pw-summary Synchronises ProCache clearing across a multi-instance environment.
 *
 * @copyright 2024 NB Communication Ltd
 * @license Mozilla Public License v2.0 http://mozilla.org/MPL/2.0/
 *
 * @property bool $cacheOn
 * @property string $id
 *
 */

class ProCacheSync extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {
		return [
			'title' => 'ProCache Sync',
			'version' => 6,
			'summary' => 'Synchronises ProCache clearing across a multi-instance environment.',
			'author' => 'nbcommunication',
			'href' => 'https://github.com/nbcommunication/ProCacheSync',
			'singular' => true,
			'autoload' => true,
			'icon' => 'refresh',
			'requires' => 'ProcessWire>=3.0.210,PHP>=8.1.0,ProCache>=4.0.3',
		];
	}

	const DB_TABLE = 'procache_sync';

	/**
	 * Is ProCache on?
	 *
	 * @var bool
	 *
	 */
	protected $cacheOn = false;

	/**
	 * The instance ID
	 *
	 * @var string
	 *
	 */
	protected $id = '';

	/**
	 * Initialize the module
	 *
	 */
	public function init() {
		$this->cacheOn = $this->wire()->procache->cacheOn;
		$this->set('data', ['cleared' => []]);
	}

	/**
	 * When ready
	 *
	 */
	public function ready() {

		if($this->cacheOn) {

			$this->runSync();

			// All hook
			$this->addHook('ProCache::clearAll', function(HookEvent $event) {
				$this->addCleared();
			});

			// If cache clear behaviour is A, C or F
			$this->addHookAfter('ProCacheStaticBehaviors::executeCacheClearBehaviors', function(HookEvent $event) {
				$cleared = $event->return;
				if(($cleared['children'] ?? 0) + ($cleared['family'] ?? 0)) {
					$this->addCleared('executeCacheClearBehaviors', [
						'page' => $event->arguments('page')->id
					]);
				} else if($cleared['site'] ?? 0) {
					$this->addCleared();
				}
			});

			// Page hook
			$this->addHook('ProCacheStaticClear::clearedPage', function(HookEvent $event) {

				$page = $event->arguments('page');
				$id = $page->id;
				$clearOptions = $event->arguments('options');

				$options = [];
				if(is_array($clearOptions)) {

					// These additional values are not required
					foreach([
						'pathsNotCleared',
						'numRowsCleared',
					] as $key) {
						unset($clearOptions[$key]);
					}

					$defaults = array(
						'getFiles' => false,
						'language' => '', // clear only this language name
						'urlSegmentStr' => '', // clear only matching this URL segment string, wildcards or regex OK
						'urlSegments' => array(), // clear only those having any of these URL segments
						'pageNum' => 0, // clear only this pageNum, true to clear all pageNum, false to clear no pageNum
						'rmdir' => false, // remove directories rather than index files?
						'languageID' => 0, // set automatically by clearPageInit when 'language' option is specified
						'clearRoot' => null, // clear root index of page path, sans URL-segments, etc.?
						'clearOnlyRoot' => false, // populated by clearPageInit() only (not user specified)
						'flags' => -1, // clear only rows matching these flags or -1 to ignore
						'page' => $page, // used by findCacheEntries() call
					);

					foreach($clearOptions as $key => $value) {
						if($value !== ($defaults[$key] ?? '')) {
							$options[$key] = $value;
						}
					}
				}

				$this->addCleared('clearPage', [
					'page' => $id,
					'options' => $options,
				]);
			});

			// When finished, update the database if the cache cleared
			$this->addHookAfter('ProcessPageView::finished', function(HookEvent $event) {
				$cleared = $this->get('cleared');
				if(count($cleared)) {
					$query = $this->wire()->database->prepare('INSERT INTO ' . self::DB_TABLE . ' SET data=:data');
					$query->bindValue(':data', json_encode([
						'id' => $this->id,
						'cleared' => $cleared,
					]));
					$query->execute();
				}
			});
		}
	}

	/**
	 * Run sync
	 *
	 * @return array
	 *
	 */
	public function ___runSync() {

		if(!$this->cacheOn) {
			return [];
		}

		$database = $this->wire()->database;
		$files = $this->wire()->files;
		$procache = $this->wire()->procache;
		$pages = $this->wire()->pages;

		$syncFile = $this->syncFile();

		$time = time();

		// check if sync has already occurred within the last 30 seconds
		if($files->exists($syncFile)) {
			if(filemtime($syncFile) + ProCache::MAINTENANCE_SECONDS > $time) {
				return [];
			}
		}

		// Check if sync is already occurring under another request
		$runFile = $this->syncFile('run', false);
		if($files->exists($runFile) && filemtime($runFile) > ($time - 30)) {
			return [];
		}

		// Create the run file
		$runFile = $this->syncFile('run');

		$query = $database->prepare('SELECT data FROM ' . self::DB_TABLE . ' WHERE ts>:now');
		$query->bindValue(':now', date('Y-m-d H:i:s', filemtime($syncFile) ?: 0));
		$query->execute();

		$rows = $query->fetchAll(\PDO::FETCH_ASSOC);
		$cleared = [];
		if(count($rows)) {

			foreach($rows as $row) {

				$clearData = json_decode($row['data'], 1);
				if(!is_array($clearData) || !isset($clearData['id']) || !isset($clearData['cleared'])) continue;
				if($clearData['id'] === $this->id) continue;

				foreach($clearData['cleared'] as $item) {

					$cleared[] = $item;

					switch($item['method']) {
						case 'clearAll':

							$procache->clearAll();

							break;
						case 'executeCacheClearBehaviors':

							$page = $pages->get($item['data']['page'] ?? 0);
							if($page->id) {
								$procache->getStatic()->executeCacheClearBehaviors($page);
							}

							break;
						case 'clearPage':

							$id = $item['data']['page'] ?? 0;
							$options = $item['data']['options'] ?? [];

							$clearFiles = [];
							if(isset($options['filesCleared'])) {
								if(is_array($options['filesCleared'])) {
									$clearFiles = $options['filesCleared'];
								}
								unset($options['filesCleared']);
							}

							$clearPaths = [];
							if(isset($options['pathsCleared'])) {
								if(is_array($options['pathsCleared'])) {
									$clearPaths = $options['pathsCleared'];
								}
								unset($options['pathsCleared']);
							}

							$page = $pages->get($id);
							if($page->id) {
								$procache->clearPage($page, $options);
							}

							// Remove files
							if(count($clearFiles)) {
								$rootPath = rtrim($this->wire()->config->paths->root, '/');
								foreach($clearFiles as $path) {
									$file = $rootPath . $path;
									if(file_exists($file)) {
										$files->unlink($file);
									}
								}
							}

							// Remove paths
							if(count($clearPaths)) {
								$cachePath = rtrim($procache->getStatic()->getCachePath(), '/');
								foreach($clearPaths as $path) {
									$dir = $cachePath . $path;
									if(is_dir($dir)) {
										$files->rmdir($dir, true);
									}
								}
							}

							break;
					}
				}
			}

			// Remove old sync records
			$query = $database->prepare('DELETE FROM ' . self::DB_TABLE . ' WHERE ts<:old');
			$query->bindValue(':old', date('Y-m-d H:i:s', strtotime('-1 day')));
			$query->execute();
		}

		touch($syncFile);
		if($files->exists($runFile)) {
			$files->unlink($runFile);
		}

		return $cleared;
	}

	/**
	 * Add clear data
	 *
	 * @param string $method
	 * @param array $data
	 *
	 */
	protected function addCleared($method = 'clearAll', array $data = []) {
		$cleared = $this->get('cleared');
		$cleared[] = [
			'method' => $method,
			'data' => $data,
		];
		$this->set('data', ['cleared' => $cleared]);
	}

	/**
	 * Get the sync file path
	 *
	 * Create the sync file if it does not exist
	 *
	 * @param string $type
	 * @param bool $create
	 * @return string
	 *
	 */
	protected function syncFile($type = 'last', $create = true) {

		$files = $this->wire()->files;

		$syncFile = $this->wire()->procache->getStatic()->getCachePath() . ".$type-sync";

		if($type === 'last' && empty($this->id)) {
			if($files->exists($syncFile)) {
				$this->id = $files->fileGetContents($syncFile);
			}
			if(empty($this->id)) {
				$this->id = $this->wire(new WireRandom())->alphanumeric(32);
			}
		}

		if($create && !$files->exists($syncFile)) {
			$files->filePutContents($syncFile, $this->id);
		}

		return $syncFile;
	}

	/**
	 * Install
	 *
	 */
	public function ___install() {
		$this->wire()->database->exec(
			'CREATE TABLE ' . self::DB_TABLE . ' (' .
				'id int(10) unsigned NOT NULL AUTO_INCREMENT, ' .
				'ts timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, ' .
				'`data` TEXT, ' .
				'PRIMARY KEY (id) ' .
			") ENGINE={$this->wire()->config->dbEngine} DEFAULT CHARSET=utf8"
		);
	}

	/**
	 * Uninstall
	 *
	 */
	public function uninstall() {
		$this->wire()->database->exec('DROP TABLE ' . self::DB_TABLE);
	}
}
